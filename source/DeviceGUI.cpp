#include "DeviceGUI.h"
#include "DisplayDriver.h"
#include "DisplayDriverConfig.h"
#if LV_USE_LIBINPUT
#include "LinuxInputDriver.h"
#elif defined(INPUTDRIVER_I2C_KBD_TYPE)
#include "I2CKeyboardInputDriver.h"
#elif defined(INPUTDRIVER_MATRIX_TYPE)
#include "KeyMatrixInputDriver.h"
#else
#include "InputDriver.h"
#endif
#include "ILog.h"
#include "lvgl.h"
#include "ui.h" // this is the lvgl ui generated by squareline editor; set build flag -I to its location in the platformio.ini variant

DeviceGUI::DeviceGUI(const DisplayDriverConfig *cfg, DisplayDriver *driver) : displaydriver(driver), inputdriver(nullptr)
{
#if LV_USE_LIBINPUT
    if (cfg)
        inputdriver = new LinuxInputDriver(cfg->keyboard(), cfg->pointer());
    else
        inputdriver = new InputDriver;
#elif defined(INPUTDRIVER_I2C_KBD_TYPE)
    inputdriver = new I2CKeyboardInputDriver;
#elif defined(INPUTDRIVER_MATRIX_TYPE)
    inputdriver = new KeyMatrixInputDriver;
#else
    inputdriver = new InputDriver;
#endif
}

void DeviceGUI::init(IClientBase *client)
{
    displaydriver->init(this);
    if (inputdriver)
        inputdriver->init();
    ILOG_DEBUG("ui_init...\n");
    ui_init();
}

void DeviceGUI::task_handler(void)
{
    displaydriver->task_handler();
};

DeviceGUI::~DeviceGUI()
{
    delete inputdriver;
}